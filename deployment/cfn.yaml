AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  aws learning

Metadata:
  AWS::CloudFormation::Stack:
    StackName: dynamo-stream-retry-test

Parameters:
  DynamoDbTestName:
    Type: String
    Default: "dynamodb_stream_test"
    Description: descriptionnnnn

Resources:
  DynamoDbTest:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDbTestName
      AttributeDefinitions:
        - AttributeName: Token
          AttributeType: S
        - AttributeName: TaskStatus
          AttributeType: S
        - AttributeName: CreatedDate
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Token
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "TaskStatusCreatedDateIndex"
          KeySchema:
            - AttributeName: "TaskStatus"
              KeyType: "HASH"
            - AttributeName: "CreatedDate"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      TimeToLiveSpecification:
        AttributeName: ExpireAt
        Enabled: true
      StreamSpecification:
        StreamViewType: KEYS_ONLY

  HogeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dynamo_integrate_func
      Runtime: python3.7
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            print(event)
            raise Exception("retry")
      Role: !GetAtt LambdaRole.Arn
      MemorySize: 128
      Timeout: 30
  # DeadLetterTopic:
  #   Type: 'AWS::SNS::Topic'
  #   Properties:
  #     TopicName: my-dead-letter-topic

  DeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: my-dead-letter-queue

  HogeFunctionEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt DynamoDbTest.StreamArn
      FunctionName: !GetAtt HogeFunction.Arn
      BatchSize: 100
      StartingPosition: LATEST
      MaximumRetryAttempts: 2
      MaximumRecordAgeInSeconds: 300
      BisectBatchOnFunctionError: true
      DestinationConfig:
        OnFailure:
          Destination: !GetAtt DeadLetterQueue.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda-x-dynamodb-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:GetRecords
                  - dynamodb:ListStreams
                  - dynamodb:DescribeStream
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sns:Publish
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

Outputs:
  DynamoDbName:
    Description: DynamoDbNameDescriptionnn
    Value: !Ref DynamoDbTest
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "DynamoDbName"]]
